stages:
  - prepare
  - test
  - build
  - deploy

variables:
  # Variables globales pour tout le pipeline
  GIT_STRATEGY: fetch
  FLUTTER_VERSION: "3.x"
  NODE_VERSION: "18.x"

cache:
  paths:
    - mobile/.pub-cache/
    - mobile/.dart_tool/
    - mobile/build/
    - backend/node_modules/

# Job de préparation du projet Flutter
prepare:flutter:
  stage: prepare
  image: 
    name: ghcr.io/cirruslabs/flutter:$FLUTTER_VERSION
    entrypoint: [""]
  script:
    - cd mobile
    - flutter pub get
  artifacts:
    paths:
      - mobile/pubspec.lock
    expire_in: 1 hour

# Job de préparation du projet Node.js
prepare:node:
  stage: prepare
  image: node:$NODE_VERSION
  script:
    - cd backend
    - npm install
  artifacts:
    paths:
      - backend/node_modules/
    expire_in: 1 hour

# Tests du backend
test:backend:
  stage: test
  image: node:$NODE_VERSION
  needs:
    - prepare:node
  script:
    - cd backend
    # Initialiser la base de données pour les tests
    - node app/scripts/initDB.js
    - npm run test
  allow_failure: false

# Tests de l'application Flutter (API)
test:flutter:api:
  stage: test
  image:
    name: ghcr.io/cirruslabs/flutter:$FLUTTER_VERSION
    entrypoint: [""]
  needs:
    - prepare:flutter
  script:
    - cd mobile
    - flutter test test/api_test.dart
  allow_failure: false

# Tests de l'application Flutter (UI)
test:flutter:ui:
  stage: test
  image:
    name: ghcr.io/cirruslabs/flutter:$FLUTTER_VERSION
    entrypoint: [""]
  needs:
    - prepare:flutter
  script:
    - cd mobile
    - flutter test test/ui_test.dart test/animation_test.dart test/widget_test.dart
  allow_failure: false

# Tests de sécurité du backend
test:backend:security:
  stage: test
  image: node:$NODE_VERSION
  needs:
    - prepare:node
  script:
    - cd backend
    - npm install -g snyk
    - snyk test || true  # Exécute les tests mais ne fait pas échouer le pipeline
  allow_failure: true  # Ce test est informatif seulement
  only:
    - main
    - develop

# Construction de l'application Android
build:android:
  stage: build
  image:
    name: ghcr.io/cirruslabs/flutter:$FLUTTER_VERSION
    entrypoint: [""]
  needs:
    - prepare:flutter
    - test:flutter:api
    - test:flutter:ui
  script:
    - cd mobile
    - flutter build apk --split-per-abi
  artifacts:
    paths:
      - mobile/build/app/outputs/flutter-apk/*.apk
    expire_in: 1 week

# Construction de l'application iOS
build:ios:
  stage: build
  image:
    name: ghcr.io/cirruslabs/flutter:$FLUTTER_VERSION
    entrypoint: [""]
  needs:
    - prepare:flutter
    - test:flutter:api
    - test:flutter:ui
  script:
    - cd mobile
    - flutter build ios --no-codesign --release
  artifacts:
    paths:
      - mobile/build/ios/iphoneos/
    expire_in: 1 week
  allow_failure: true  # La construction iOS peut échouer sans les certificats appropriés
  only:
    - main
    - develop

# Publication d'une release GitHub lorsqu'un tag est créé
release:github:
  stage: deploy
  image: alpine:latest
  script:
    - apk add --no-cache curl jq git
    - VERSION=${CI_COMMIT_TAG#v}
    - |
      curl -X POST \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/USERNAME/ci_cd_flutter/releases" \
        -d "{
          \"tag_name\": \"${CI_COMMIT_TAG}\",
          \"name\": \"Version ${VERSION}\",
          \"body\": \"Release automatique de la version ${VERSION}\",
          \"draft\": false,
          \"prerelease\": false
        }"
  only:
    - tags